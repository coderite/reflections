What happens when you initialize a repository? Why do you need to do it?
A .git file is added that enables files to be committed and tracked.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area offers offers a collection point and buffer zone and organized new additions in preparation for a new commit.

How can you use the staging area to make sure you have one commit per logical change?
Once you have added files and think you are ready to commit, you can use git diff --staged to verify you only have 1 logical change you are commit. If you made other changes you can use the git reset --hard to revert any other changes (its like a final undo button).

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Situations: adding new features while keeping a working version available on the master branch. Creating different version while keeping the original intact.

How do the diagrams help you visualize the branch structure?
Diagrams show an easy visual representation of the commit sequences.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
We get a single branch that includes the history of both previous branches. The diagram flow remains intact which is why the diagrams are useful.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Manually merging files is a tedious process prone to human factor errors.
Automatic merging is quicker and allows you to easily identify merge conflicts and fix them.