How did viewing a diff between two versions of a file help you see the bug that was introduced?
- It helped me pinpoint the exact location of changes where a possible typo might have occurred.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
1. In case a critical bug is introduced you will be able to revert to a previously working file.
2. You can see any changes that were introduced by anyone else.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?
PROS
1. fine control of what is commited and when.
2. Separate commits logically.
CONS
You need to stay on top of working logically and efficiently.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
1. tracking multiple files in one commit enables developers to keep code together as one unit. If files are tracked seperately code might no longer compile if one update does not update the rest of the files.

How can you use the commands git log and git diff to view the history of files?
You can see the entire history and any changes made with git log. Then you can go a step further and use git diff to identify what new lines of code where added and which lines of code were deleted.

How might using version control make you more confident to make changes that could break something?
Being able to revert to a pre-bug state makes it easier to commit changes which might break something.

Now that you have your workspace set up, what do you want to try using Git for?
I want to use git for mainting Java projects.